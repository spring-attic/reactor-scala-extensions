if (!hasProperty('scalaVersion')) {
    ext.scalaVersion = '2.13.1'
}

def scalaVersionMatch = scalaVersion =~ /^(\d+\.\d+)\.\d+$/
if (scalaVersionMatch.find()) {
    ext.baseScalaVersion = scalaVersionMatch.group(1)
} else {
    ext.baseScalaVersion = scalaVersion
}

ext {
    bytebuddyVersion    = "1.10.3"
    findBugsVersion     = "3.0.2"
    logbackVersion      = "1.3.0-alpha4" //alpha5
    mockitoVersion      = "3.2.0"
    pegdownVersion      = "1.6.0"
    reactorVersion      = "3.3.1.RELEASE"
    scalaLoggingVersion = "3.9.2"
    scalatestVersion    = "3.0.8" //3.1.0
    scoverageVersion    = "1.4.1"
    scalaCollCompatVersion = "2.1.2"
}

ext.libraries = [
        scalaCollCompat     : "org.scala-lang.modules:scala-collection-compat_$baseScalaVersion:$scalaCollCompatVersion",
        findbugs            : "com.google.code.findbugs:jsr305:$findBugsVersion",
        logback             : "ch.qos.logback:logback-classic:$logbackVersion",
        mockitoInline       : "org.mockito:mockito-inline:$mockitoVersion",
        pegdown             : "org.pegdown:pegdown:$pegdownVersion",
        reactorCore         : "io.projectreactor:reactor-core:$reactorVersion",
        reactorTest         : "io.projectreactor:reactor-test:$reactorVersion",
        scalaLibrary        : "org.scala-lang:scala-library:$scalaVersion",
        scalaLogging        : "com.typesafe.scala-logging:scala-logging_$baseScalaVersion:$scalaLoggingVersion",
        scalatest           : "org.scalatest:scalatest_$baseScalaVersion:$scalatestVersion",
        scoveragePlugin     : "org.scoverage:scalac-scoverage-plugin_$baseScalaVersion:$scoverageVersion",
        scoverageRuntime    : "org.scoverage:scalac-scoverage-runtime_$baseScalaVersion:$scoverageVersion"
]
