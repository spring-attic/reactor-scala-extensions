group 'io.projectreactor'
description = 'A scala extension for Reactor Flux and Mono'

apply plugin: 'scala'
apply plugin: "com.github.maiflai.scalatest"
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'org.scoverage'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'com.github.ben-manes.versions'
//apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

repositories {
    mavenCentral()
}

dependencies {
    zinc "com.typesafe.zinc:zinc:0.3.15"

    compile libraries.scalaLibrary
    compile libraries.reactorCore
    compile libraries.findbugs

//    test dependencies
    testCompile libraries.scalatest
    testRuntime libraries.pegdown
    testCompile libraries.reactorTest
    testCompile libraries.mockitoInline
    testCompile libraries.scalaLogging
    testRuntime libraries.logback
    scoverage libraries.scoveragePlugin, libraries.scoverageRuntime
}

buildscript {
    apply from: file('versions.gradle')
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "gradle.plugin.com.github.maiflai:gradle-scalatest:0.25"
        classpath "gradle.plugin.org.scoverage:gradle-scoverage:2.5.0"
        classpath 'net.researchgate:gradle-release:2.7.0'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0'
        classpath 'org.owasp:dependency-check-gradle:3.3.1'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
//        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }
}

dependencyCheck {
    skipConfigurations = ["apiElements", "implementation", "runtimeElements", "runtimeOnly", "testImplementation", "testRuntimeOnly", "scoverageImplementation", "scoverageRuntimeOnly"]
}
targetCompatibility = "1.8"

if (!project.parent) {
    apply plugin: 'net.researchgate.release'
    final svs = ['2.12.10', '2.11.12', '2.13.0-M3']

    for (sv in svs) {
        String scalaVersionInDot = sv.replaceAll("_", ".")

        tasks.create(name: "build_$sv", type: GradleBuild) {
            buildFile = './build.gradle'
            tasks = ['build']
            startParameter.projectProperties = [scalaVersion: "${scalaVersionInDot}"]
        }

        tasks.create(name: "uploadArchives_${sv}", type: GradleBuild) {
            buildFile = './build.gradle'
            tasks = ['uploadArchives']
            startParameter.projectProperties = [scalaVersion: "${scalaVersionInDot}"]
        }
    }

    tasks.create(name: "buildAll", dependsOn: svs.collect{"build_${it}"}) {}

    tasks.create(name: "uploadArchivesAll", dependsOn: svs.collect{"uploadArchives_${it}"}) {}

    project.task("releaseAll", description: 'Verify project, release and update version to next.', group: "Release", type: GradleBuild) {
        startParameter = project.getGradle().startParameter.newInstance()
        tasks = [
                'createScmAdapter', 'checkCommitNeeded', 'checkUpdateNeeded', 'unSnapshotVersion',
                'confirmReleaseVersion', 'checkSnapshotDependencies', 'buildAll',
                'preTagCommit', 'createReleaseTag', 'updateVersion', 'commitNewVersion'
        ]
    }

    project.createReleaseTag.dependsOn {
        project.uploadArchivesAll
    }
}
archivesBaseName = "${rootProject.name}_$baseScalaVersion"

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task scaladocJar(type: Jar, dependsOn: scaladoc) {
    classifier = 'javadoc'
    from scaladoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives scaladocJar
}

ext.sonatypeUsername = hasProperty("ossrhUsername") ? ossrhUsername : System.getenv("ossrhUsername")
ext.sonatypePassword = hasProperty("ossrhPassword") ? ossrhPassword : System.getenv("ossrhPassword")
//ext.bintrayUsername = hasProperty("bintrayUser") ? bintrayUser : System.getenv("ossrhUsername")
//ext.bintrayKey = hasProperty("bintrayApiKey") ? bintrayApiKey : System.getenv("ossrhPassword")

/*
bintray {
    user = "$bintrayUsername"
    key = "$bintrayKey"
    publications = ['MyPublication']
    configurations = ['archives']
    pkg {
        repo = "${project.group}"
        name = "${project.archivesBaseName}"
        version {
            name = "${project.version}"
            released = new Date()
        }
    }
}
*/

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact scaladocJar
            groupId "${project.group}"
            artifactId "${project.archivesBaseName}"
            version "${project.version}"
            pom {
                name = "reactor-scala-extensions"
                description = "Reactor Scala Extensions"
                url = "https://github.com/reactor/reactor-scala-extensions"
                licenses {
                    license {
                        name = "Apache License"
                        url = "https://github.com/reactor/reactor-scala-extensions/blob/master/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "sinwe"
                        name = "Winarto Zhao"
                        email = "winarto@gmail.com"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/reactor/reactor-scala-extensions.git"
                    developerConnection = "scm:git:https://github.com/reactor/reactor-scala-extensions.git"
                    url = "https://github.com/reactor/reactor-scala-extensions.git"
                }
            }
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'Scala Extensions for reactor-core'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'A scala extensions for Reactor Flux and Mono so that the code can be fluently used in Scala'
                url 'https://github.com/reactor/reactor-scala-extensions'

                scm {
                    connection 'scm:git:git@github.com:reactor/reactor-scala-extensions.git'
                    developerConnection 'scm:git:git@github.com:reactor/reactor-scala-extensions.git'
                    url 'https://github.com/reactor/reactor-scala-extensions'
                }

                licenses {
                    license {
                        name 'Apache License, Version 2.0, January 2004'
                        url 'https://www.apache.org/licenses/LICENSE-2.0.html'
                    }
                }

                developers {
                    developer {
                        id 'sinwe'
                        name 'Winarto'
                        email 'winarto@gmail.com'
                    }
                }
            }
        }
    }
}
//bintrayUpload.onlyIf {isReleaseVersion}
afterReleaseBuild.dependsOn uploadArchives
//uploadArchives.dependsOn bintrayUpload

ScalaCompileOptions.metaClass.daemonServer = true
ScalaCompileOptions.metaClass.fork = true
ScalaCompileOptions.metaClass.useAnt = false
ScalaCompileOptions.metaClass.useCompileDaemon = false

project.tasks.scaladoc.scalaDocOptions.additionalParameters = ["-no-link-warnings"]
project.tasks.compileScala.scalaCompileOptions.additionalParameters = ["-target:jvm-1.8", "-feature"]
project.tasks.compileTestScala.scalaCompileOptions.additionalParameters = ["-target:jvm-1.8"]

release {
    git {
        requireBranch = ''
    }
}

test {
    maxParallelForks = 1
}

testScoverage {
    maxParallelForks = 1
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

signing {
    required { isReleaseVersion }
    useGpgCmd()
    sign configurations.archives
//    sign publishing.publications.MyPublication
}
